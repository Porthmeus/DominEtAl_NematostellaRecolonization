head(resEnr)
?gseKEGG()
source('~/Work/Nematostella_Recolonization/RNAseq/mapping/200305_Analysis/scripts/testEnrichment.R')
head(FC)
# now calculate the same for the GSEA
FC <- results[["log2FoldChange"]]
names(FC) <- rownames(results)
FC <- sort(FC, decreasing =TRUE)
head(FC)
?GSEA
?enricher
gsea <- GSEA(names(FC), minGSSize = 20, TERM2GENE = anno)
gsea <- GSEA(FC, minGSSize = 20, TERM2GENE = anno)
tail (FC)
gse
gsea
gsea$data.frame
dotplot(gsea)
?dotplot(gsea)
dotplot(gsea, showCategory=20)
hyGeo
head(hyGeo)
head(gsea)
hh <- as.data.frame(hyGeo)
hh
gseaDF <- as.data.frame(gsea)
gseaDF
View(results)
View(gseaDF)
View(hh)
emapplot(gsea)
cnetplot(gsea, categorySize="pvalue", foldChange=gene_list, showCategory = 3)
cnetplot(gsea, categorySize="pvalue", foldChange=FC, showCategory = 3)
ridgeplot(gsea)
barplot(hyGeo)
hh
dotplot(hyGeo)
dim(gseaDF)
?dotplot(gsea)
dotplot(gsea, showCategory=32)
ridgeplot(hyGeo)
ridgeplots(gsea)
ridgeplot(gsea)
library(ggplot2)
ridgeplot(gsea) + geom_hline(0)
ridgeplot(gsea) + geom_hline(h=0)
ridgeplot(gsea) + geom_hline(yintercept = 0)
ridgeplot(gsea) + geom_vline(yintercept = 0)
ridgeplot(gsea) + geom_vline(xintercept = 0)
ridge <- ridgeplot(gsea)
dot <- dotplot(gsea)
dot
dot <- dotplot(gsea, showCategories=32)
dot <- dotplot(gsea, showCategory=32)
dot <- dotplot(gsea, showCategory=32, orderBy="x")
dot <- dotplot(gsea, showCategory=32, orderBy="x")
library(cowplot)
plot_grid(dot, ridge)
dot <- dotplot(gsea, showCategory=32, orderBy=FC)
colnames(gsea)
colnames(gseaDF)
dot <- dotplot(gsea, showCategory=32, orderBy="ID")
plot_grid(dot, ridge)
?ridgeplot()
?ridgeplot
ridge <- ridgeplot(gsea, showCategory = 32)
plot_grid(dot, ridge)
hyGeo
hh
dotplot(hyGeo)
dotplot(hyGeo, orderBy = "GenRatio")
dotplot(hyGeo, orderBy = "GeneRatio")
dotplot(hyGeo, orderBy = "bgRatio")
dotplot(hyGeo, orderBy = "BgRatio")
hh[,1:5]
anno
annoL <- anno[, l = length(gene),by= cluster]
annoL <- anno[,  length(gene),by= cluster]
annoL
annoL[V1 >=20,]
a <-annoL[V1 >=20,cluster]
anno[cluster %in% a,]
length(unique(anno[cluster %in% a,gene]))
nrow(anno)
nrow(deseq)
hh[,1:5]
dotplot(hh)
dotplot(hyGeo)
# read the annotation
anno <- fread("proteinFamilies/Enrichment/ProteinFamilies.csv", header =FALSE)
nrow(anno)
head(anno)
# read the annotation
anno <- fread("proteinFamilies/Enrichment/ProteinFamilies.csv")
head(anno)
#colnames(anno) <- c("cluster","gene")
# extract the DEGs from that RNAseq for hypergeometrical testing
DEGs <- rownames(results[(results$padj <= 0.05 & !is.na(results$padj)),])
universe <- unique(rownames(results))
annoL <- anno[,l := length(Gene), by = PF]
dim(anno)
dim(annoL)
# read the annotation
anno <- fread("proteinFamilies/Enrichment/ProteinFamilies.csv")
annoL <- anno[,.(l = length(Gene)), by = PF]
annoL
anno
dim(annoL)
plot(ecdf(annoL[,l]))
hist(annoL[,l])))
hist(annoL[,l])
quantile(0.2, annoL[,l])
quantile(annoL[,l])
?enricher
#colnames(anno) <- c("cluster","gene")
# extract the DEGs from that RNAseq for hypergeometrical testing
DEGs <- rownames(results[(results$padj <= 0.05 & !is.na(results$padj)),])
universe <- unique(rownames(results))
# calculate the hypergeometrical test
hyGeo <- enricher(gene = DEGs, universe = universe, minGSSize = 20, TERM2GENE = anno)
data.frame(hyGeo)
# calculate the hypergeometrical test
hyGeo <- enricher(gene = DEGs, universe = universe, minGSSize = 10, TERM2GENE = anno)
data.frame(hyGeo)
# calculate the hypergeometrical test
hyGeo <- enricher(gene = DEGs, universe = universe,TERM2GENE = anno)
data.frame(hyGeo)
# now calculate the same for the GSEA
FC <- results[["log2FoldChange"]]
names(FC) <- rownames(results)
FC <- sort(FC, decreasing =TRUE)
gsea <- GSEA(FC, TERM2GENE = anno)
data.frame(gsea)
data.frame(gsea)[,1:5]
data.frame(hyGeo)[,1:5]
length(DEGs)
length(unique(DEGs))
data.frame(hyGeo)[,1:6]
data.frame(hyGeo)[,1:7]
data.frame(hyGeo)[,1:8]
data.frame(hyGeo)[,-8]
hh <- data.frame(hyGeo)
p <- ggplot(hh, (size=Count, x=ID, y=GeneRatio, fill = pvalue)) + geom_dotplot()
p <- ggplot(hh, aes(size=Count, x=ID, y=GeneRatio, fill = pvalue)) + geom_dotplot()
p
p <- ggplot(hh, aes(size=Count, y=ID, x=GeneRatio, fill = pvalue)) + geom_dotplot()
p
p <- ggplot(hh, aes(size=Count, y=ID, x=GeneRatio, fill = pvalue)) + geom_point()
p
hh
hh[,4]
as.numeric(hh[,4])
eval(hh[,4])
expression(hh[,4])
table(DEGs %in% anno[,Gene])
hh[,-8]
DEGs <- DEGs[DEGs %in% anno[,2]]
length(DEGs)
head(anno)
head(anno[,2])
#colnames(anno) <- c("cluster","gene")
# extract the DEGs from that RNAseq for hypergeometrical testing
DEGs <- rownames(results[(results$padj <= 0.05 & !is.na(results$padj)),])
table(DEGs %in% anno[,2])
table(DEGs %in% as.character(anno[,2]))
table(DEGs %in% as.character(anno[,Gene]))
table(DEGs %in% anno[[2]])
DEGs <- DEGs[DEGs %in% anno[[2]]]
universe <- unique(rownames(results))
p <- ggplot(hh, aes(size=Count, y=ID, x=Count/length(DEGs), fill = pvalue)) + geom_point()
p
barplot(hyGeo)
dim(hyGeo)
nrow(hyGeo)
nrow(gsea)
data.table(hyGeo)
data.frame(hyGeo)
gseaDF <- data.frame(gsea)
gseaDF[,-8]
gseaDF[,-9]
gseaDF[,-10]
gseaDF[,-11]
ridgeplot(gsea)
?ridgeplot
hheatplot(gsea)
heatplot(gsea)
anno
anno[,length(2), by=PF]
anno[,length(2), by=PF]
colnames(anno)
a<-colnames(anno)
anno[,length(a[1]), by=PF]
anno[,length(a[1]_), by=PF]
get(a[1])
anno[,length(get(a[1])), by=PF]
anno[a[1], by=PF]
anno[a[1],]
anno[,a[1]]
a[1]
anno[,a[1]]]
anno[[a[1]]]
anno[,a[1], with=F]
anno[,length(2), by=PF,with=F]
anno[,length(a[2]), by=PF,with=F]
anno[,1, by=PF,with=F]
anno[,1:2, by=PF,with=F]
anno[,a, by=PF,with=F]
anno[,length(a[2]), by=PF,with=F]
anno[,length(a[2]),with=F, by="PF"]
anno[,length(a[2]),with=F]
anno[,a[2],with=F]
colnames(anno) <- c("cluster","gene")
annoL <- anno[,.(len = length(gene)),by=cluster]
annoL
hyGeoDF <- merge(hyGeoDF, annoL, by.x="ID",by.y="len")
# calculate the hypergeometrical test
hyGeo <- enricher(gene = DEGs, universe = universe,TERM2GENE = anno)
hyGeoDF <- data.frame(hyGeo)
hyGeoDF <- merge(hyGeoDF, annoL, by.x="ID",by.y="len")
hyGeoDF[,-8]
hyGeoDF <- data.frame(hyGeo)
hyGeoDF <- merge(hyGeoDF, annoL, by.x="ID",by.y="cluster")
hyGeoDF[,-8]
p
annoL <- anno[,.(ClusterSize = length(gene)),by=cluster]
hyGeoDF <- merge(hyGeoDF, annoL, by.x="ID",by.y="cluster")
p <- ggplot(hyGeoDF, aes(x=Count/ClusterSize, y=ID, col=p.adjust, size = Count)) +geom_point()
p
?scale_color_continuous()
scale_color_gradient(low="blue", high="red")
# create some plots for evaluation
pDot <- ggplot(hyGeoDF, aes(x=Count/ClusterSize, y=ID, col=p.adjust, size = Count)) +
geom_point() +
scale_color_gradient(low="blue", high="red")
pDot
pRidge <- ridgeplot(hyGeo, showCategory = nrow(hyGeo))
pNet <- cnetplot(hyGeo, showCategory = nrow(hyGeo))
pNet
gseaDF[,-11]
pBar <- barplot(hyGeo, showCategory = nrow(hyGeo))
pBar
pBar <- barplot(hyGeo, showCategory = nrow(hyGeo)) +
xlab("No. of DEGs")
pbar
pBarr
pBar
plot_grid(pDot,pBar)
pBar <- barplot(hyGeo, showCategory = nrow(hyGeo)) +
xlab("No. of DEGs")
plot_grid(pDot,pBar)
pBar <- ggplot(hyGeoDF, aes(x = Count, y=ID, fill=p.adjust)) +
geom_bar(stat="identity") +
scale_fill_gradient(low="blue", high = "red")
plot_grid(pDot,pBar)
p<-barplot(hyGeo, showCategory = nrow(hyGeo)) +
xlab("No. of DEGs")
# create some plots for evaluation
pDot <- ggplot(hyGeoDF, aes(x=Count/ClusterSize, y=ID, col=p.adjust, size = Count)) +
geom_point() +
scale_color_gradient(high="blue", low="red")
pBar <- ggplot(hyGeoDF, aes(x = Count, y=ID, fill=p.adjust)) +
geom_bar(stat="identity") +
scale_fill_gradient(high="blue", low = "red")
plot_grid(pDot,pBar)
pBar <- ggplot(hyGeoDF, aes(x = Count, y=ID, fill=p.adjust)) +
geom_bar(stat="identity") +
scale_fill_gradient(high="blue", low = "red") +
theme(legend.position = "none")
pGrid <- plot_grid(pBar,pDot)
pGrid
dotplot(gsea)
head(gseaDF)
head(gseaDF[,-11])
gsea <- GSEA(FC, TERM2GENE = anno)
gseaDF <- data.frame(gsea)
head(gseaDF[,-11])
FC
max(table(FC))
tail(sorted(table(FC)))
tail(sort(table(FC)))
while(any(duplicated(FC))){
FC[duplicated(FC)] <- FC[duplicated(FC)]-1E-10
}
gsea <- GSEA(FC, TERM2GENE = anno)
gseaDF <- data.frame(gsea)
head(gseaDF[,-11])
dotplot(FC)
dotplot(gsea)
gseaDF <- merge(gsea, annoL, by.x=ID, by.y=cluster)
gseaDF <- merge(gseaDF, annoL, by.x=ID, by.y=cluster)
gseaDF <- data.frame(gsea)
gseaDF <- merge(gseaDF, annoL, by.x=ID, by.y=cluster)
gsea
gseaDF
gseaDF[,-11]
gseaDF <- merge(data.table(gseaDF), annoL, by.x=ID, by.y=cluster)
gseaDF <- data.table(data.frame(gsea))
gseaDF
gseaDF[,-11]
gseaDF <- merge(gseaDF, annoL, by.x=ID, by.y=cluster)
gseaDF <- merge(gseaDF, annoL, by.x="ID", by.y="cluster")
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point()
gseaDot
gseaDF
gseaDF[,-11]
dotplot(gsea)
gregexpr("/",gseaDF[1,11])
gregexpr("/",gseaDF[1,11])[[1]]
gregexpr("/",gseaDF[1,11])[[1]][1]
gregexpr("/",gseaDF[1,11])[[1]][2]
gregexpr("/",gseaDF[1,11])[[1]]
a <- gregexpr("/",gseaDF[1,11])
a[1]
a[2]
?gregexpr
a[2]
length(a)
length(a[[1]])
sum(a[[1]])
a <- regexpr("/",gseaDF[1,11])
a
a <- grep("/",gseaDF[1,11])
a
a <- grepexpr("/",gseaDF[1,11])
a <- gregexpr("/",gseaDF[1,11])
a
unlist(a)
gregexpr("/","hallo")
unlist(gregexpr("/","hallo"))
gregexpr("/","hallo")
stringr::str_count("NVE", "hallo")
stringr::str_count("NVE", gseaDF[1,11])
stringr::str_count("NVE", gseaDF[[1,11]])
gseaDF[1,11]
gseaDF[[1,11]]
stringr::str_count("/", gseaDF[[1,11]])
stringr::str_count("N", gseaDF[[1,11]])
stringr::str_count("N", gseaDF[,11])
stringr::str_count("N", gseaDF[[11]])
stringr::str_count("\/", gseaDF[[11]])
stringr::str_count("NVE", gseaDF[[11]])
stringr::str_count("//", gseaDF[[11]])
stringr::str_count("\\/", gseaDF[[11]])
gregexpr("/", gseaDF[[11]])
gregexpr("NVE", gseaDF[[11]])
sapply(gregexpr("NVE", gseaDF[[11]]), length)
sapply(gregexpr("/", gseaDF[[11]]), length)
sapply(gregexpr("/", gseaDF[[11]]), length)+1
gseaDF
gseaDF[, Count := length(gregexpr("/", core_enrichment))+1]
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point()
gseaDot
gseaDF
gseaDF[, Count := length(gregexpr("/", core_enrichment)[[1]])+1]
gseaDot
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point()
gseaDot
gseaDot[-11]
gseaDot[,-11]
gseaDF[,-11]
gseaDF[,c(11,14)]
gseaDF[,c(11,14), with=F]
gseaDF[,c(11,13), with=F]
gregexpr("/", gseaDF[,11])[[1]]
gregexpr("/", gseaDF[,core_enrichment])[[1]]
length(gregexpr("/", gseaDF[,core_enrichment])[[1]])
gseaDF[, Count := sapply(gregexpr("/", core_enrichment),length)+1]
gseaDF
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point()
gseaDot
gseaDF[, CountClusterRatio := Count/ClusterSize]
setkey(gseaDF, CountClusterRatio)
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point()
gseaDot
gseaDF <- data.table(data.frame(gsea))
gseaDF <- merge(gseaDF, annoL, by.x="ID", by.y="cluster")
gseaDF[, Count := sapply(gregexpr("/", core_enrichment),length)+1]
gseaDF[,1]
setkey(gseaDF, CountClusterRatio)
gseaDF[, CountClusterRatio := Count/ClusterSize]
setkey(gseaDF, CountClusterRatio)
gseaDF
gseaDF[,1]
gseaDF[,ID := factor(ID, levels = ID[order(CountClusterRatio)])]
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point()
gseaDot
gseaDot <- ggplot(gseaDF, aes(x=Count/ClusterSize, y = ID, size = Count, color = p.adjust)) +
geom_point() +
scale_color_gradient(high="blue", low="red")
gseaDot
gseaRidge
gseaRidge <- ridgeplot(gsea)
gseaRidge
gseaRidge <- ridgeplot(gsea, showCategory = nrow(gsea))
gseaRidge
?ridgeplot
ridgeplot
showMethods("ridgeplot")
gseaRidge
gseaDot
library(ggridges)
gseaDF
# to create nice looking ridgeplot some data needs to be tangeled again...
gseaDF[, .(gene = strsplit(core_enrichment, split ="/"), by = ID)]
# to create nice looking ridgeplot some data needs to be tangeled again...
gseaDF[, .(gene = strsplit(core_enrichment, split ="/")[[1]], by = ID)]
# to create nice looking ridgeplot some data needs to be tangeled again...
pf <- c()
nve <- c()
for(i in 1:nrow(gseaDF)){
n <- strsplit(gseaDF[i,core_enrichment], split = "/")[[1]]
pf <- c(pf, rep(gseaDF[i,ID], length(n)))
nve <- c(nve,n)
}
ridgeDF <- data.frame(ID = pf, gene = nve, FC = FC[nve])
ridgeDF
gseaDF[,-11]
i
gseaDF[i,ID]
# to create nice looking ridgeplot some data needs to be tangeled again...
pf <- c()
nve <- c()
for(i in 1:nrow(gseaDF)){
n <- strsplit(gseaDF[i,core_enrichment], split = "/")[[1]]
pf <- c(pf, rep(as.character(gseaDF[i,ID]), length(n)))
nve <- c(nve,n)
}
ridgeDF <- data.frame(ID = pf, gene = nve, FC = FC[nve])
gseaRidge <- ridgeplot(gsea, showCategory = nrow(gsea))
ridgeDf
ridgeDF
gseaRidge <- ggplot(gseaDF, aes(x = FC, y = ID)) + geom_density_ridges()
gseaRidge
data(iris)
head(iris)
gseaRidge <- ggplot(ridgeDF, aes(x = FC, y = ID)) + geom_density_ridges()
gseaRidge
levels(gseaDF[,ID])
ridgeDF <- data.frame(ID = factor(pf, levels = levels(gseaDF[,ID])), gene = nve, FC = FC[nve])
gseaRidge <- ggplot(ridgeDF, aes(x = FC, y = ID)) +
geom_density_ridges()
gseaRidge
gseaDot
ridgeDF <- data.frame(ID = factor(pf, levels = levels(gseaDF[,ID])),
gene = nve,
FC = FC[nve],
p.adjust = gseaDF[pf, p.adjust])
pf
ridgeDF <- data.frame(ID = factor(pf, levels = levels(gseaDF[,ID])),
gene = nve,
FC = FC[nve],
p.adjust = gseaDF[ID == pf, p.adjust])
gseaDF[-11]
gseaDF[,-11]
ridgeDF <- data.frame(ID = factor(pf, levels = levels(gseaDF[,ID])),
gene = nve,
FC = FC[nve],
p.adjust = gseaDF[pf == ID, p.adjust])
gseaDF[,.(ID, p.adjust)]
ridgeDF <- merge(ridgeDF, gseaDF[,.(ID,p.adjust)])
ridgeDF
gseaRidge <- ggplot(ridgeDF, aes(x = FC, y = ID, fill = p.adjust)) +
geom_density_ridges()
gseaRidge
gseaRidge <- ggplot(ridgeDF, aes(x = FC, y = ID, fill = p.adjust)) +
geom_density_ridges() +
scale_fill_gradient(high="blue", low = "red")
gseaRidge
pGSEA <- plot_grid(gseaRidge, gseaDot)
pGSEA
gseaRidge <- ggplot(ridgeDF, aes(x = FC, y = ID, fill = p.adjust)) +
geom_density_ridges() +
scale_fill_gradient(high="blue", low = "red") +
theme(legend.position = "none")
pGSEA <- plot_grid(gseaRidge, gseaDot)
pGSEA
pGSEA
ggsave(pGSEA, filename = "proteinFamilies/Enrichment/plotCondition_bE.A_vs_wt_PF_hyGeo.svg", width = 8, height = 4, device = "svg")
# create some plots for evaluation
# a dotplot
pDot <- ggplot(hyGeoDF, aes(x=Count/ClusterSize, y=ID, col=p.adjust, size = Count)) +
geom_point() +
scale_color_gradient(high="blue", low="red")
# a barplot
pBar <- ggplot(hyGeoDF, aes(x = Count, y=ID, fill=p.adjust)) +
geom_bar(stat="identity") +
scale_fill_gradient(high="blue", low = "red") +
theme(legend.position = "none")
pGrid <- plot_grid(pBar,pDot)
ggsave(pGrid, filename = "proteinFamilies/Enrichment/plotCondition_bE.A_vs_wt_PF_hyGeo.svg", width = 8, height = 4, device = "svg")
text("No significant cluster found")
plot(1, type ="n");text("No significant cluster found")
plot(1, type ="n", main ="No sig. cluster found")
pp <- ggplot(1)
pp <- ggplot(df(1,1))
pp <- ggplot(df(1,1), aes(x=1,y=1))
pp <- ggplot(data.frame(1,1), aes(x=1,y=1))
pp
pp <- ggplot(data.frame(1,1))
üü
pp
pp+ggtitle("no significant cluster found")
hyGeoDF
colnames(hyGeoDF)
paste(colnames(hyGeoDF), collapse = ",")
data.frame(colnames(hyGeoDF))
